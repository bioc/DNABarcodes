// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// analyse_barcodes
std::vector<double> analyse_barcodes(const std::string metric, const std::vector< std::string > barcodes, const unsigned int cores, const unsigned int cost_sub, const unsigned int cost_indel);
RcppExport SEXP DNABarcodes_analyse_barcodes(SEXP metricSEXP, SEXP barcodesSEXP, SEXP coresSEXP, SEXP cost_subSEXP, SEXP cost_indelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< const std::vector< std::string > >::type barcodes(barcodesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cost_sub(cost_subSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cost_indel(cost_indelSEXP);
    __result = Rcpp::wrap(analyse_barcodes(metric, barcodes, cores, cost_sub, cost_indel));
    return __result;
END_RCPP
}
// barcode_set_distances
NumericMatrix barcode_set_distances(std::string metric, std::vector< std::string > barcodes, unsigned int cores, const unsigned int cost_sub, const unsigned int cost_indel);
RcppExport SEXP DNABarcodes_barcode_set_distances(SEXP metricSEXP, SEXP barcodesSEXP, SEXP coresSEXP, SEXP cost_subSEXP, SEXP cost_indelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type barcodes(barcodesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cost_sub(cost_subSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cost_indel(cost_indelSEXP);
    __result = Rcpp::wrap(barcode_set_distances(metric, barcodes, cores, cost_sub, cost_indel));
    return __result;
END_RCPP
}
// code_falsification
Rcpp::DataFrame code_falsification(const std::vector< std::string > str_barcodes, const unsigned long int d, const std::string metric, const unsigned int cores);
RcppExport SEXP DNABarcodes_code_falsification(SEXP str_barcodesSEXP, SEXP dSEXP, SEXP metricSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::vector< std::string > >::type str_barcodes(str_barcodesSEXP);
    Rcpp::traits::input_parameter< const unsigned long int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cores(coresSEXP);
    __result = Rcpp::wrap(code_falsification(str_barcodes, d, metric, cores));
    return __result;
END_RCPP
}
// create_dnabarcodes
std::vector< std::string > create_dnabarcodes(const unsigned int n, const unsigned long int d, const std::string metric, const std::string generation, const bool filter_triplets, const bool filter_gc, const bool filter_self_complementary, const std::vector< std::string > str_pool, const unsigned int iterations, const unsigned int population, const unsigned int cores, const bool use_cache, const unsigned int cost_sub, const unsigned int cost_indel);
RcppExport SEXP DNABarcodes_create_dnabarcodes(SEXP nSEXP, SEXP dSEXP, SEXP metricSEXP, SEXP generationSEXP, SEXP filter_tripletsSEXP, SEXP filter_gcSEXP, SEXP filter_self_complementarySEXP, SEXP str_poolSEXP, SEXP iterationsSEXP, SEXP populationSEXP, SEXP coresSEXP, SEXP use_cacheSEXP, SEXP cost_subSEXP, SEXP cost_indelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const unsigned long int >::type d(dSEXP);
    Rcpp::traits::input_parameter< const std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< const std::string >::type generation(generationSEXP);
    Rcpp::traits::input_parameter< const bool >::type filter_triplets(filter_tripletsSEXP);
    Rcpp::traits::input_parameter< const bool >::type filter_gc(filter_gcSEXP);
    Rcpp::traits::input_parameter< const bool >::type filter_self_complementary(filter_self_complementarySEXP);
    Rcpp::traits::input_parameter< const std::vector< std::string > >::type str_pool(str_poolSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type population(populationSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_cache(use_cacheSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cost_sub(cost_subSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cost_indel(cost_indelSEXP);
    __result = Rcpp::wrap(create_dnabarcodes(n, d, metric, generation, filter_triplets, filter_gc, filter_self_complementary, str_pool, iterations, population, cores, use_cache, cost_sub, cost_indel));
    return __result;
END_RCPP
}
// test_distance
unsigned int test_distance(std::string str_seq1, std::string str_seq2);
RcppExport SEXP DNABarcodes_test_distance(SEXP str_seq1SEXP, SEXP str_seq2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type str_seq1(str_seq1SEXP);
    Rcpp::traits::input_parameter< std::string >::type str_seq2(str_seq2SEXP);
    __result = Rcpp::wrap(test_distance(str_seq1, str_seq2));
    return __result;
END_RCPP
}
// create_pool
std::vector< std::string > create_pool(unsigned long int n, bool filter_triplets, bool filter_gc, bool filter_self_complementary, unsigned int cores);
RcppExport SEXP DNABarcodes_create_pool(SEXP nSEXP, SEXP filter_tripletsSEXP, SEXP filter_gcSEXP, SEXP filter_self_complementarySEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< unsigned long int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type filter_triplets(filter_tripletsSEXP);
    Rcpp::traits::input_parameter< bool >::type filter_gc(filter_gcSEXP);
    Rcpp::traits::input_parameter< bool >::type filter_self_complementary(filter_self_complementarySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cores(coresSEXP);
    __result = Rcpp::wrap(create_pool(n, filter_triplets, filter_gc, filter_self_complementary, cores));
    return __result;
END_RCPP
}
// demultiplex
Rcpp::DataFrame demultiplex(std::vector< std::string > barcodes, std::vector< std::string > reads, std::string metric, const unsigned int cost_sub, const unsigned int cost_indel);
RcppExport SEXP DNABarcodes_demultiplex(SEXP barcodesSEXP, SEXP readsSEXP, SEXP metricSEXP, SEXP cost_subSEXP, SEXP cost_indelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type barcodes(barcodesSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type reads(readsSEXP);
    Rcpp::traits::input_parameter< std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cost_sub(cost_subSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cost_indel(cost_indelSEXP);
    __result = Rcpp::wrap(demultiplex(barcodes, reads, metric, cost_sub, cost_indel));
    return __result;
END_RCPP
}
// distance
unsigned long int distance(std::string sequence1, std::string sequence2, std::string metric, unsigned int cost_sub, unsigned int cost_indel);
RcppExport SEXP DNABarcodes_distance(SEXP sequence1SEXP, SEXP sequence2SEXP, SEXP metricSEXP, SEXP cost_subSEXP, SEXP cost_indelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type sequence1(sequence1SEXP);
    Rcpp::traits::input_parameter< std::string >::type sequence2(sequence2SEXP);
    Rcpp::traits::input_parameter< std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cost_sub(cost_subSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type cost_indel(cost_indelSEXP);
    __result = Rcpp::wrap(distance(sequence1, sequence2, metric, cost_sub, cost_indel));
    return __result;
END_RCPP
}
